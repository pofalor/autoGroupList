# handlers.py

import telebot
from telebot import types
import functools
import db
import schedule_logic
from time_utils import get_local_today
from bot_instance import bot, safe_send_message, safe_answer_callback_query
from config import TIME_LIMIT_HOUR_LOCAL

def create_main_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    btn_schedule = types.KeyboardButton('/schedule')
    btn_info = types.KeyboardButton('/info')
    btn_attend_other = types.KeyboardButton('/attend_other_group')
    btn_help = types.KeyboardButton('/help')
    markup.add(btn_schedule, btn_info, btn_attend_other, btn_help)
    return markup

def registration_required(func):
    @functools.wraps(func)
    def wrapper(message, *args, **kwargs):
        user_id = message.from_user.id
        student_info = db.get_student_info_by_telegram(user_id)
        if student_info is None:
            safe_send_message(message.chat.id, "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.", reply_markup=types.ReplyKeyboardRemove())
            return
        elif student_info.get("subgroup") is None:
             safe_send_message(message.chat.id, "–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –ø–æ–¥–≥—Ä—É–ø–ø—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.")
             return
        return func(message, student_info, *args, **kwargs)
    return wrapper

@bot.message_handler(commands=['start'])
def start(message):
    user_id = message.from_user.id
    student_info = db.get_student_info_by_telegram(user_id)
    if student_info and student_info.get("subgroup"):
        safe_send_message(message.chat.id, f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {student_info['name']}! üëã", reply_markup=create_main_menu())
        return
    elif student_info and not student_info.get("subgroup"):
         markup = types.InlineKeyboardMarkup(row_width=2)
         group1_button = types.InlineKeyboardButton("1-—è –ø–æ–¥–≥—Ä—É–ø–ø–∞", callback_data="setgroup_subgroup1")
         group2_button = types.InlineKeyboardButton("2-—è –ø–æ–¥–≥—Ä—É–ø–ø–∞", callback_data="setgroup_subgroup2")
         markup.add(group1_button, group2_button)
         safe_send_message(message.chat.id, f"–ü—Ä–∏–≤–µ—Ç, {student_info['name']}! –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–≥—Ä—É–ø–ø—É:", reply_markup=markup)
         return
    students = db.get_students_list_for_start()
    if not students:
        safe_send_message(message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø—ã.")
        return
    group_list = '\n'.join([f"{number}. {name}" for number, name in students])
    safe_send_message(message.chat.id, f"–ü—Ä–∏–≤–µ—Ç! –°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø—ã:\n{group_list}\n\n–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä:", reply_markup=types.ReplyKeyboardRemove())

@bot.message_handler(commands=['help'])
def help_command(message):
    help_text = """
    **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É** ü§ñ

    –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏ –æ—Ç–º–µ—á–∞—Ç—å—Å—è –Ω–∞ –ø–∞—Ä–∞—Ö.

    **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
    /start - –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã / –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ.
    /schedule - –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.
    /info - –í–∞—à–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (–§–ò–û, –Ω–æ–º–µ—Ä, –ø–æ–¥–≥—Ä—É–ø–ø–∞).
    /attend\_other\_group - –û—Ç–º–µ—Ç–∏—Ç—å—Å—è –Ω–∞ –ø–∞—Ä–µ –¥—Ä—É–≥–æ–π –ø–æ–¥–≥—Ä—É–ø–ø—ã.
    /help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞.

    –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∞—á–∞–ª–µ –ø–∞—Ä –ø—Ä–∏—Ö–æ–¥—è—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.
    –û—Ç–º–µ—á–∞—Ç—å—Å—è –º–æ–∂–Ω–æ –¥–æ {limit_hour}:00 –ø–æ –º–µ—Å—Ç–Ω–æ–º—É –≤—Ä–µ–º–µ–Ω–∏.
    """.format(limit_hour=TIME_LIMIT_HOUR_LOCAL)
    safe_send_message(message.chat.id, help_text, parse_mode='Markdown', reply_markup=create_main_menu())

@bot.message_handler(commands=['info'])
@registration_required
def info_command(message, student_info):
    info_text = f"""
    **–í–∞—à–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**
    üë§ **–§–ò–û:** {student_info['name']}
    üî¢ **–ù–æ–º–µ—Ä –≤ –≥—Ä—É–ø–ø–µ:** {student_info['number']}
    üéì **–ü–æ–¥–≥—Ä—É–ø–ø–∞:** {'1-—è' if student_info['subgroup'] == 'subgroup1' else '2-—è'}
    """
    safe_send_message(message.chat.id, info_text, parse_mode='Markdown', reply_markup=create_main_menu())

@bot.message_handler(commands=['schedule'])
@registration_required
def schedule_command(message, student_info):
    subgroup = student_info['subgroup']
    week_type, day_name, local_date = schedule_logic.get_current_week_type_and_day()
    subgroup_display = "1-–π" if subgroup == "subgroup1" else "2-–π"
    try:
        schedule_data = db.get_schedule_for_student(subgroup, week_type, day_name)
        schedule_text = schedule_logic.format_schedule(schedule_data)
        date_str = local_date.strftime('%d.%m.%Y')
        header = f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è **{subgroup_display} –ø–æ–¥–≥—Ä—É–ø–ø—ã** –Ω–∞ —Å–µ–≥–æ–¥–Ω—è ({date_str}, {day_name.capitalize()}, {week_type} –Ω–µ–¥–µ–ª—è):\n\n"
        safe_send_message(message.chat.id, header + schedule_text, parse_mode='Markdown', reply_markup=create_main_menu())
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è {subgroup}, {week_type}, {day_name}: {e}")
        safe_send_message(message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.")

@bot.message_handler(commands=['attend_other_group'])
@registration_required
def attend_other_group_command(message, student_info):
    current_subgroup = student_info['subgroup']
    student_db_id = student_info['id']
    other_subgroup = "subgroup2" if current_subgroup == "subgroup1" else "subgroup1"
    other_subgroup_display = "2-–π" if other_subgroup == "subgroup2" else "1-–π"
    week_type, day_name, local_date = schedule_logic.get_current_week_type_and_day()

    if not schedule_logic.can_mark_attendance():
        safe_send_message(message.chat.id, f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—Ä–µ–º—è –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ (–¥–æ {TIME_LIMIT_HOUR_LOCAL}:00 –ø–æ –º–µ—Å—Ç–Ω–æ–º—É –≤—Ä–µ–º–µ–Ω–∏) —É–∂–µ –≤—ã—à–ª–æ.", reply_markup=create_main_menu())
        return

    try:
        other_schedule_data = db.get_schedule_for_student(other_subgroup, week_type, day_name)
        date_str = local_date.strftime('%d.%m.%Y')
        if not other_schedule_data:
            safe_send_message(message.chat.id, f"–£ **{other_subgroup_display} –ø–æ–¥–≥—Ä—É–ø–ø—ã** —Å–µ–≥–æ–¥–Ω—è ({date_str}, {day_name.capitalize()}, {week_type} –Ω–µ–¥–µ–ª—è) –ø–∞—Ä –Ω–µ—Ç.", reply_markup=create_main_menu())
            return

        markup = types.InlineKeyboardMarkup()
        schedule_text_list = [f"–ü–∞—Ä—ã **{other_subgroup_display} –ø–æ–¥–≥—Ä—É–ø–ø—ã** –Ω–∞ —Å–µ–≥–æ–¥–Ω—è ({date_str}, {day_name.capitalize()}, {week_type} –Ω–µ–¥–µ–ª—è):"]
        for subject, start_time in other_schedule_data:
            callback_data = f"markother_{student_db_id}_{subject}"
            button = types.InlineKeyboardButton(f"{start_time} - {subject}", callback_data=callback_data)
            markup.add(button)
            schedule_text_list.append(f"‚Ä¢ {start_time} - {subject}")
        schedule_text = "\n".join(schedule_text_list)
        safe_send_message(message.chat.id, f"{schedule_text}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä—É:", reply_markup=markup, parse_mode='Markdown')
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥—Ä—É–≥–æ–π –ø–æ–¥–≥—Ä—É–ø–ø—ã ({other_subgroup}): {e}")
        safe_send_message(message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥—Ä—É–≥–æ–π –ø–æ–¥–≥—Ä—É–ø–ø—ã.")

@bot.message_handler(func=lambda message: message.text.isdigit())
def handle_number(message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    student_info = db.get_student_info_by_telegram(user_id)
    if student_info and student_info.get("subgroup"):
        safe_send_message(chat_id, "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.", reply_markup=create_main_menu())
        return
    elif student_info and not student_info.get("subgroup"):
         safe_send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–≥—Ä—É–ø–ø—É (–∫–Ω–æ–ø–∫–∏ –≤—ã—à–µ).")
         return
    try:
        number = int(message.text)
    except ValueError:
        safe_send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ü–∏—Ñ—Ä–∞–º–∏.")
        return
    student_exists = db.get_student_by_number(number)
    if not student_exists:
        safe_send_message(chat_id, "–¢–∞–∫–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –Ω–µ—Ç.")
        return
    if db.is_number_taken(number):
        safe_send_message(chat_id, f"–ù–æ–º–µ—Ä {number} —É–∂–µ –∑–∞–Ω—è—Ç.")
        return
    try:
        db.link_telegram_id_to_student(user_id, number)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏–≤—è–∑–∫–∏ {user_id} –∫ {number}: {e}")
        safe_send_message(chat_id, "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞.")
        return
    markup = types.InlineKeyboardMarkup(row_width=2)
    group1_button = types.InlineKeyboardButton("1-—è –ø–æ–¥–≥—Ä—É–ø–ø–∞", callback_data="setgroup_subgroup1")
    group2_button = types.InlineKeyboardButton("2-—è –ø–æ–¥–≥—Ä—É–ø–ø–∞", callback_data="setgroup_subgroup2")
    markup.add(group1_button, group2_button)
    safe_send_message(chat_id, f"–ù–æ–º–µ—Ä {number} —Å–æ—Ö—Ä–∞–Ω–µ–Ω! üëç\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–≥—Ä—É–ø–ø—É:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("setgroup_"))
def handle_group_choice(call):
    user_id = call.from_user.id
    chat_id = call.message.chat.id
    message_id = call.message.message_id
    subgroup = call.data.split("_")[1]
    subgroup_display_name = "1-—è" if subgroup == "subgroup1" else "2-—è"
    try:
        db.update_student_subgroup(user_id, subgroup)
        try:
            bot.edit_message_reply_markup(chat_id=chat_id, message_id=message_id, reply_markup=None)
        except telebot.apihelper.ApiException as e:
             print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–±—Ä–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –ø–æ–¥–≥—Ä—É–ø–ø—ã: {e}")
        safe_send_message(chat_id, f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {subgroup_display_name} –ø–æ–¥–≥—Ä—É–ø–ø—É. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", reply_markup=create_main_menu())
        safe_answer_callback_query(call.id, text=f"–ü–æ–¥–≥—Ä—É–ø–ø–∞ {subgroup_display_name} –≤—ã–±—Ä–∞–Ω–∞.")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–¥–≥—Ä—É–ø–ø—ã {user_id}: {e}")
        safe_send_message(chat_id, "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–¥–≥—Ä—É–ø–ø—ã.")
        safe_answer_callback_query(call.id, text="–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è", show_alert=True)

@bot.callback_query_handler(func=lambda call: call.data.startswith("attend_"))
def handle_attendance(call):
    user_id = call.from_user.id
    chat_id = call.message.chat.id
    message_id = call.message.message_id
    try:
        _, student_db_id_str, subject = call.data.split("_", 2)
        student_db_id = int(student_db_id_str)
    except (ValueError, IndexError):
        print(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ callback attend_: {call.data}")
        safe_answer_callback_query(call.id, text="–û—à–∏–±–∫–∞ –∫–Ω–æ–ø–∫–∏", show_alert=True)
        return

    current_student_db_id = db.get_student_id_by_telegram(user_id)
    if current_student_db_id != student_db_id:
        safe_answer_callback_query(call.id, text="–≠—Ç–æ –∫–Ω–æ–ø–∫–∞ –¥–ª—è –¥—Ä—É–≥–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞.", show_alert=True)
        return

    if not schedule_logic.can_mark_attendance():
        safe_answer_callback_query(call.id, text=f"–í—Ä–µ–º—è –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ (–¥–æ {TIME_LIMIT_HOUR_LOCAL}:00 –ø–æ –º–µ—Å—Ç–Ω–æ–º—É –≤—Ä–µ–º–µ–Ω–∏) —É–∂–µ –≤—ã—à–ª–æ.", show_alert=True)
        try:
            bot.edit_message_reply_markup(chat_id=chat_id, message_id=message_id, reply_markup=None)
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–±—Ä–∞—Ç—å –∫–Ω–æ–ø–∫—É attend_ –ø–æ—Å–ª–µ –ª–∏–º–∏—Ç–∞: {e}")
        return

    try:
        local_today = get_local_today()
        db.mark_attendance(student_db_id, subject, local_today, is_present=True)
        try:
            original_message_lines = call.message.text.split('\n')
            header = original_message_lines[0]
            new_text = f"{header}\n\n‚úÖ –í—ã –æ—Ç–º–µ—á–µ–Ω—ã."
            bot.edit_message_text(chat_id=chat_id, message_id=message_id, text=new_text, reply_markup=None)
        except telebot.apihelper.ApiException as e:
            if 'message is not modified' not in str(e):
                print(f"–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è attend_: {e}")
                safe_send_message(chat_id, f"‚úÖ –í—ã –æ—Ç–º–µ—á–µ–Ω—ã –Ω–∞ –∑–∞–Ω—è—Ç–∏–∏ '{subject}'.")
        safe_answer_callback_query(call.id, text="–í—ã –æ—Ç–º–µ—á–µ–Ω—ã!")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏ attend_ {student_db_id}, {subject}: {e}")
        safe_send_message(chat_id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ.")
        safe_answer_callback_query(call.id, text="–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏", show_alert=True)

@bot.callback_query_handler(func=lambda call: call.data.startswith("markother_"))
def handle_mark_other_attendance(call):
    user_id = call.from_user.id
    chat_id = call.message.chat.id
    message_id = call.message.message_id
    try:
        _, student_db_id_str, subject = call.data.split("_", 2)
        student_db_id_from_callback = int(student_db_id_str)
    except (ValueError, IndexError):
        print(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ callback markother_: {call.data}")
        safe_answer_callback_query(call.id, text="–û—à–∏–±–∫–∞ –∫–Ω–æ–ø–∫–∏", show_alert=True)
        return
    current_student_info = db.get_student_info_by_telegram(user_id)
    if not current_student_info or current_student_info['id'] != student_db_id_from_callback:
         safe_answer_callback_query(call.id, text="–î–µ–π—Å—Ç–≤–∏–µ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ.", show_alert=True)
         return

    if not schedule_logic.can_mark_attendance():
        safe_answer_callback_query(call.id, text=f"–í—Ä–µ–º—è –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ (–¥–æ {TIME_LIMIT_HOUR_LOCAL}:00 –ø–æ –º–µ—Å—Ç–Ω–æ–º—É –≤—Ä–µ–º–µ–Ω–∏) —É–∂–µ –≤—ã—à–ª–æ.", show_alert=True)
        try:
            bot.edit_message_reply_markup(chat_id=chat_id, message_id=message_id, reply_markup=None)
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–±—Ä–∞—Ç—å –∫–Ω–æ–ø–∫–∏ markother_ –ø–æ—Å–ª–µ –ª–∏–º–∏—Ç–∞: {e}")
        return

    try:
        local_today = get_local_today()
        student_db_id = current_student_info['id']
        db.mark_attendance(student_db_id, subject, local_today, is_present=True)
        try:
            new_text = call.message.text + f"\n\n‚úÖ –í—ã –æ—Ç–º–µ—á–µ–Ω—ã –Ω–∞ –∑–∞–Ω—è—Ç–∏–∏ '{subject}'."
            bot.edit_message_text(chat_id=chat_id, message_id=message_id, text=new_text, reply_markup=None, parse_mode='Markdown')
        except telebot.apihelper.ApiException as e:
            if 'message is not modified' not in str(e):
                print(f"–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è markother_: {e}")
                safe_send_message(chat_id, f"‚úÖ –í—ã –æ—Ç–º–µ—á–µ–Ω—ã –Ω–∞ –∑–∞–Ω—è—Ç–∏–∏ '{subject}'.")
        safe_answer_callback_query(call.id, text=f"–í—ã –æ—Ç–º–µ—á–µ–Ω—ã –Ω–∞ '{subject}'!")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏ markother_ {student_db_id}, {subject}: {e}")
        safe_send_message(chat_id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ –Ω–∞ '{subject}'.")
        safe_answer_callback_query(call.id, text="–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏", show_alert=True)

@bot.message_handler(content_types=['text'])
def handle_other_text(message):
     user_id = message.from_user.id
     student_info = db.get_student_info_by_telegram(user_id)
     if student_info and student_info.get("subgroup"):
         safe_send_message(message.chat.id, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É.", reply_markup=create_main_menu())
     elif student_info and not student_info.get("subgroup"):
          safe_send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–≥—Ä—É–ø–ø—É.")
     else:
         safe_send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.", reply_markup=types.ReplyKeyboardRemove())